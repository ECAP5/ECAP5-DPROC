name: Simulated testing using verilator

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  simulate:
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v3

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -GNinja

    - name: Build simulation
      run: ninja -C ${{github.workspace}}/build build

    - name: Simulate
      id: simulate
      # Enable -k option to simulate every module even if one fails
      # Checks if there is any testdata
      # Check if there is any fail in that testdata
      run: >-
        ninja -C ${{github.workspace}}/build -k 0 tests &&
        ls -A1q ${{github.workspace}}/build/tests/testdata/ | grep -q . && 
        (! grep -vqe "[^;]*;0;" ${{github.workspace}}/build/tests/testdata/*)

    - name: Cache simulation results
      uses: actions/cache/save@v3
      env:
        cache-name: simulation-results
        cache-folder-path: ${{github.workspace}}/build/tests/testdata
      with:
        paths: ${{ env.cache-folder-path }}
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles(env.cache-folder-path) }}
        restore-keys: ${{ runner.os }}-build-${{ env.cache-name }}

  report:
    runs-on: self-hosted
    needs: simulate

    steps:
    - uses: actions/checkout@v3

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -GNinja

    - name: Import simulation results
      uses: actions/cache/restore@v3
      env:
        cache-name: simulation-results
        cache-folder-path: ${{github.workspace}}/build/tests/testdata
      with:
        paths: ${{ env.cache-folder-path }}
        key: ${{ runner.os }}-build-${{ env.cache-name }}

    - name: Generate report
      if: ${{ always() && (steps.simulate.outcome == 'success' || steps.simulate.outcome == 'failure') }}
      run: ninja -C ${{github.workspace}}/build test_summary

    - name: Write summary
      if: ${{ always() && (steps.simulate.outcome == 'success' || steps.simulate.outcome == 'failure') }}
      run: cat ${{github.workspace}}/build/test-summary.md >> $GITHUB_STEP_SUMMARY

    - name: Create test badge
      if: ${{ always() && github.ref == 'refs/heads/main' }}
      run: >-
        if [ ! -f "build/test-report-badge.json" ]; then
          mkdir -p build &&
          echo "{\"schemaVersion\": 1, \"label\": \"Test result\", \"message\": \"Failed\", \"color\": \"red\"}" > build/test-report-badge.json;
        fi

    - name: Upload test status badge
      if: ${{ always() && github.ref == 'refs/heads/main' }}
      uses: exuanbo/actions-deploy-gist@v1
      with:
        token: ${{ secrets.GIST_SECRET }}
        gist_id: 32195ea7fa70c0218ef3f9952504c59e
        file_path: build/test-report-badge.json
        file_type: text 
