name: Simulated testing using verilator

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  simulate:
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v3

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -GNinja

    - name: Build simulation
      run: ninja -C ${{github.workspace}}/build build

    - name: Simulate
      id: simulate
      # Enable -k option to simulate every module even if one fails
      # Checks if there is any testdata
      # Check if there is any fail in that testdata
      run: >-
        ninja -C ${{github.workspace}}/build -k 0 tests &&
        ls -A1q ${{github.workspace}}/build/tests/testdata/ | grep -q . && 
        (! grep -vqe "[^;]*;0;" ${{github.workspace}}/build/tests/testdata/*)

    - name: Generate report
      if: ${{ always() && (steps.simulate.outcome == 'success' || steps.simulate.outcome == 'failure') }}
      run: ninja -C ${{github.workspace}}/build test_summary

    - name: Write summary
      if: ${{ always() && (steps.simulate.outcome == 'success' || steps.simulate.outcome == 'failure') }}
      run: cat ${{github.workspace}}/build/test-summary.md >> $GITHUB_STEP_SUMMARY

    - name: Retreive badge status
      if: always()
      run: >-
           echo "TEST_STATUS=$ECAP5_TREQ_TEST_STATUS" >> $GITHUB_ENV &&
           if [[ -z $ECAP5_TREQ_TEST_STATUS ]]; then
             echo "TEST_IS_FAILED=true" >> $GITHUB_ENV;
             echo "TEST_STATUS=Failed" >> $GITHUB_ENV;
           else
             echo "TEST_IS_FAILED=false" >> $GITHUB_ENV;
           fi 

    - name: Create test status badge
      if: always()
      uses: schneegans/dynamic-badges-action@v1.6.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: 32195ea7fa70c0218ef3f9952504c59e
        filename: test-badge.json
        label: Test status
        message: ${{ env.TEST_STATUS }}%
        valColorRange: ${{ env.TEST_STATUS }}
        maxColorRange: 100
        minColorRange: 0
        isError: ${{ env.TEST_IS_FAILED }}
